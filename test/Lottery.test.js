const assert = require('assert'); // part of node library
const ganache = require('ganache-cli');
const Web3 = require('web3');
const web3 = new Web3(ganache.provider());
const { interface, bytecode } = require('../compile');

let accounts;
let lottery;
let deploymentManager;

beforeEach(async () => {
  // Get a list of all accounts generated by ganache
  accounts = await web3.eth.getAccounts();

  deploymentManager = accounts[0];

  // Use one of the accounts to deploy the contract
  lottery = await new web3.eth.Contract(JSON.parse(interface))
    .deploy({ data: bytecode })
    .send({ from: deploymentManager, gas: '1000000' });
});

const attemptEnter = (amount, account) => {
  return lottery.methods.enter().send({
    from: account,
    value: web3.utils.toWei(amount, 'ether'),
  });
}

const sendWinningsToWinner = (account) => {
  return lottery.methods.sendWinningsToWinner().send({ from: account });
}

describe('Lottery Contract', () => {
  it('deploys a contract', () => {
    assert.ok(lottery.options.address);
  });

  it('sets a manager who deployed the contract', async () => {
    const manager = await lottery.methods.manager().call();
    assert.strictEqual(manager, deploymentManager);
  });

  it('allows one account to enter', async () => {
    await attemptEnter('0.01', accounts[1]);

    const allPlayers = await lottery.methods.getPlayers().call();
    assert.strictEqual(allPlayers.length, 1);
    assert.strictEqual(allPlayers[0], accounts[1]);
  });

  it('does not allow to enter without the correct amount of wei', async () => {
    try {
      await await attemptEnter('0.001', accounts[1]);
      assert(false);
    } catch (e) {
      assert.strictEqual(e.message, 'VM Exception while processing transaction: revert');
    }

    let allPlayers = await lottery.methods.getPlayers().call();
    assert.strictEqual(allPlayers.length, 0);

    try {
      await await attemptEnter('0.02', accounts[1]);
      assert(false);
    } catch (e) {
      assert.strictEqual(e.message, 'VM Exception while processing transaction: revert');
    }

    allPlayers = await lottery.methods.getPlayers().call();
    assert.strictEqual(allPlayers.length, 0);
  });

  it('allows multiple accounts to enter', async () => {
    await attemptEnter('0.01', accounts[1]);

    let allPlayers = await lottery.methods.getPlayers().call();
    assert.strictEqual(allPlayers.length, 1);
    assert.strictEqual(allPlayers[0], accounts[1]);

    await attemptEnter('0.01', accounts[2]);

    allPlayers = await lottery.methods.getPlayers().call();
    assert.strictEqual(allPlayers.length, 2);
    assert.strictEqual(allPlayers[1], accounts[2]);

    await attemptEnter('0.01', accounts[3]);

    allPlayers = await lottery.methods.getPlayers().call();
    assert.strictEqual(allPlayers.length, 3);
    assert.strictEqual(allPlayers[2], accounts[3]);
  });

  it('requires the manager to trigger sendWinningsToWinner', async () => {
    await attemptEnter('0.01', accounts[1]);
    try {
      await sendWinningsToWinner(accounts[1]);
      assert(false);
    } catch (e) {
      assert.strictEqual(e.message, 'VM Exception while processing transaction: revert');
    }
  });

  it('lets the manager sendWinningsToWinner and resets players', async () => {
    const player = accounts[1];
    await attemptEnter('0.01', player);
    let contractBalance = await web3.eth.getBalance(lottery.options.address);

    // contract received eth
    assert.strictEqual(contractBalance, web3.utils.toWei('0.01', 'ether'))

    // player entered the lottery
    let allPlayers = await lottery.methods.getPlayers().call();
    assert.strictEqual(allPlayers.length, 1);
    assert.strictEqual(allPlayers[0], player);

    const initialPlayerBalance = await web3.eth.getBalance(player);

    // manager sends winnings
    await sendWinningsToWinner(deploymentManager);

    // calculate the difference in player's balance
    const finalPlayerBalance = await web3.eth.getBalance(player);
    const balanceDifference = finalPlayerBalance - initialPlayerBalance;

    // account for gas fees - will be less than 0.01 eth
    assert(balanceDifference > web3.utils.toWei('0.0099', 'ether'));

    // contract balance was sent out
    contractBalance = await web3.eth.getBalance(lottery.options.address);
    assert.strictEqual(contractBalance, web3.utils.toWei('0', 'ether'))

    // all players have been reset
    allPlayers = await lottery.methods.getPlayers().call();
    assert.strictEqual(allPlayers.length, 0);
  });
})
